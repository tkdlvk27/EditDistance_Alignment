import sys

# MatchInformation class contains match score, mismatch score, gap score.. etc penalty information.
class MatchInformation(object):
    # Constructor function.
    def __init__(self, match, mismatch, gap):
        self.match = match
        self.mismatch = mismatch
        self.gap = gap

    # When the matchscore needs to be fixed
    def setMatch(self,match,mismatch,gap):
        self.match = match
        self.mismatch = mismatch
        self.gap = gap

    # get The match information. It returns as list.
    def getMatch(self):
        return [match, mismatch, gap]

    # get the match score. Opening Gap penalty occur only one time per one gap
    def GAP(self, Extension_penalty,Length,OpeningGapPenalty):
        return Extension_penalty * Length+OpeningGapPenalty

    # get if match or not
    def MATCH(self, a, b,match,mismatch):
        if a==b:
            return match
        else:
            return mismatch

# Alignment class. It can set two sequences, and can get edit matrix, Way matrix, and alignment result
class Alignment(MatchInformation):
    # init function. It reuses the constructor function in MatchInformation
    def __init__(self, DNA1, DNA2, match, mismatch, gap):
        MatchInformation.__init__(self, match,mismatch,gap)
        self.DNA1 = DNA1
        self.DNA2 = DNA2
        self.matrix = {}
        self.Way_matrix = {}
        self.ResultCount = 0

    # When the DNA sequences need to be fixed
    def setDNA1(self,DNA1):
        self.DNA1 = DNA1
    def setDNA2(self,DNA2):
        self.DNA2 = DNA2

    def PRINT_MATRIX(self, matrix, DNA1, DNA2):
        for i in range( len(DNA1)+1):
            for j in range( len(DNA2)+1):
                sys.stdout.write(str(matrix[i,j]) + " ")
            print("")
        print("")

    # Set edit matrix, and way matrix. after that, Backtracking (recursively)
    def EditDistance(self):
        print(DNA1)
        print(DNA2)

        matrix = {}
        Way_matrix = {} # re-initializing matrices

        #init edit matrix
        for i in range(len(DNA1)+1):
            for j in range(len(DNA2)+1):
                matrix[i,j]=0
                Way_matrix[i,j] = 0

        for i in range(0, len(DNA1)+1 ): # DNA1 is x column axis.
            matrix[i,0] = i

        for j in range(0, len(DNA2)+1 ):
            matrix[0,j] = j

        # set edit matrix
        for i in range(1, len(DNA1)+1):
            for j in range(1, len(DNA2)+1):
                matrix[i,j] = min(
                    matrix[i-1,j-1] + self.MATCH( DNA1[i-1],DNA2[j-1],match,mismatch ),
                    matrix[i-1,j  ] + self.GAP(1,0,1),
                    matrix[i  ,j-1] + self.GAP(1,0,1))

        # print edit matrix
        self.PRINT_MATRIX(matrix, DNA1, DNA2)

        # init way matrix for recursive backtracking
        for i in range(len(DNA1)+1):
            Way_matrix[i,0]=2
        for j in range(len(DNA2)+1):
            Way_matrix[0,j]=4

        # set way matrix
        for i in range(1, len(DNA1) + 1):
            for j in range(1, len(DNA2) + 1):
                if matrix[i,j] == matrix[i-1,j-1] + self.MATCH( DNA1[i-1],DNA2[j-1],match,mismatch ):
                    Way_matrix[i,j]=Way_matrix[i,j] + 1     # 001

                if matrix[i,j] == (matrix[i-1,j] + self.GAP(1,0,1)):
                    Way_matrix[i,j]=Way_matrix[i,j] + 2     # 010

                if matrix[i,j] == (matrix[i,j-1] + self.GAP(1,0,1)):
                    Way_matrix[i,j]=Way_matrix[i,j] + 4     # 100

        # print way matrix
        self.PRINT_MATRIX(Way_matrix, DNA1, DNA2)

        # Do backtracking.
        self.BACKTRACKING(len(DNA1), len(DNA2), Way_matrix, DNA1, DNA2, "","")

  
    def BACKTRACKING(self, i,j,Way_matrix,DNA1,DNA2,Result_DNA1,Result_DNA2):
        # print results
        if ((i==0) and (j==0)):
            self.ResultCount = self.ResultCount+1
            print ("case " + str(self.ResultCount)+":")
            print ("\t"+Result_DNA1)
            print ("\t"+Result_DNA2+"\n")
            return
		
if __name__ == "__main__":
    DNA1 = "GCTGATATAGCT"
    DNA2 = "GGGTGATTAGCT"
    match = 0
    mismatch = 1
    gap = 1
    myAlignment = Alignment(DNA1,DNA2,match,mismatch,gap)
    myAlignment.EditDistance()

    # print(myAlignment.getMatch()) # Match information
