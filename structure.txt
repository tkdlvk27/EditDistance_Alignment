import sys

import sys

class MatchInformation(object):
    def __init__(self, match, mismatch, gap):
        self.match = match
        self.mismatch = mismatch
        self.gap = gap

    # When the matchscore needs to be fixed
    def setMatch(self,match,mismatch,gap):
        self.match = match
        self.mismatch = mismatch
        self.gap = gap

    # get The match information. It returns as list.
    def getMatch(self):
        return [match, mismatch, gap]
    def GAP(self, Extension_penalty,Length,OpeningGapPenalty):
        return Extension_penalty * Length+OpeningGapPenalty

    # get if match or not
    def MATCH(self, a, b,match,mismatch):
        if a==b:
            return match
        else:
            return mismatch

class Alignment(MatchInformation):

    def __init__(self, DNA1, DNA2, match, mismatch, gap):
        MatchInformation.__init__(self, match,mismatch,gap)
        self.DNA1 = DNA1
        self.DNA2 = DNA2
        self.matrix = {}
        self.Way_matrix = {}
        self.ResultCount = 0
      
   def setDNA1(self,DNA1):
        self.DNA1 = DNA1
    def setDNA2(self,DNA2):
        self.DNA2 = DNA2

   # Set edit matrix, and way matrix. after that, Backtracking (recursively)
    def EditDistance(self):
        print(DNA1)
        print(DNA2)

        matrix = {}
        Way_matrix = {} # re-initializing matrices

        #init edit matrix
        for i in range(len(DNA1)+1):
            for j in range(len(DNA2)+1):
                matrix[i,j]=0
                Way_matrix[i,j] = 0

        for i in range(0, len(DNA1)+1 ): # DNA1 is x column axis.
            matrix[i,0] = i

        for j in range(0, len(DNA2)+1 ):
            matrix[0,j] = j

        # set edit matrix
        for i in range(1, len(DNA1)+1):
            for j in range(1, len(DNA2)+1):
                matrix[i,j] = min(
                    matrix[i-1,j-1] + self.MATCH( DNA1[i-1],DNA2[j-1],match,mismatch ),
                    matrix[i-1,j  ] + self.GAP(1,0,1),
                    matrix[i  ,j-1] + self.GAP(1,0,1))

        # print edit matrix
        self.PRINT_MATRIX(matrix, DNA1, DNA2)

        # init way matrix for recursive backtracking
        for i in range(len(DNA1)+1):
            Way_matrix[i,0]=2
        for j in range(len(DNA2)+1):
            Way_matrix[0,j]=4

        # set way matrix
        for i in range(1, len(DNA1) + 1):
            for j in range(1, len(DNA2) + 1):
                if matrix[i,j] == matrix[i-1,j-1] + self.MATCH( DNA1[i-1],DNA2[j-1],match,mismatch ):
                    Way_matrix[i,j]=Way_matrix[i,j] + 1     # 001

                if matrix[i,j] == (matrix[i-1,j] + self.GAP(1,0,1)):
                    Way_matrix[i,j]=Way_matrix[i,j] + 2     # 010

                if matrix[i,j] == (matrix[i,j-1] + self.GAP(1,0,1)):



if __name__ == "__main__":
    DNA1 = "GCTGATATAGCT"
    DNA2 = "GGGTGATTAGCT"
    match = 0
    mismatch = 1
    gap = 1
